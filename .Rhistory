shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gen_value = function(mean, sd, n = 1){x = rnorm(n = n, mean = mean, sd = mean*sd); return(x)}
# update value last year
update_value = function(current_value, perc_change){new_value = current_value*(1+(perc_change/100))}
gen_value(-4, sd = 0.2)
sd = 0.2
gen_value(-4, sd = sd, n = 1)
rnorm(n = 1, mean = -4, sd = sd)
runApp()
update_value = function(current_value, perc_change){
new_value = current_value*(1+(perc_change/100))
return(new_value)
}
update_value(10, -10)
gen_value(-10, 0.2, n = 1)
rnorm(n = 1, mean = -10, sd = 0.2)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggvis)
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyverse)
library(DT)
library(plotly)
library(writexl)
library(shinydashboard)
library(ggforce)
library(data.table)
library(ids)
library(ineq)
library(gtExtras)
library(sendmailR)
library(mailR)
library(shinyFiles)
# foutmeldingen
# als schijfgrens lager dan hvi
# SET BASE MULTIPLIERS
risico = 2
sd = 0.2
sd_rend = 0.5*risico*sd
# FUNCTIONS
# negatie %in%
`%notin%` <- Negate(`%in%`)
# functie om aanwas in overbruggingswetgeving te bepalen
overbrug_me = function(spaargeld, finproduct, restbezit, schuld, type = "aanwas voor hvv"){
schuld = schuld - 3400
if (schuld < 0){schuld = 0}
# voor toerekening van het hvv
vermogen = spaargeld + finproduct + restbezit - schuld
aanwas = 0.0036*spaargeld + 0.0617*finproduct + 0.0617*restbezit - 0.0257*schuld
if (type == "aanwas voor hvv"){return(aanwas)}
if (type == "vermogen voor hvv"){return(grondslag)}
# na toerekening van het hvv
hvv = 57000
if (vermogen > 0) {prp = hvv / vermogen} else {prp = 1}
if (prp > 1){prp = 1}
vermogen_hvv = (spaargeld - (prp*spaargeld)) + (finproduct - (prp*finproduct)) + (restbezit - (prp*restbezit)) - (schuld - (prp*schuld))
aanwas_hvv = 0.0036*(spaargeld - (prp*spaargeld)) + 0.0617*(finproduct - (prp*finproduct)) + 0.0617*(restbezit - (prp*restbezit)) - 0.0257*(schuld - (prp*schuld))
if (type == "aanwas na hvv"){return(aanwas_hvv)}
if (type == "vermogen na hvv"){return(vermogen_hvv)}
}
# function to draw value from normal distribution
gen_value = function(mean, sd, n = 1){x = rnorm(n = n, mean = mean, sd = 0.2); return(x)}
# update value last year
update_value = function(current_value, perc_change){
new_value = current_value + (current_value * (perc_change / 100))
return(new_value)
}
#update_value(10, -10); gen_value(-10, 0.2, n = 1)
# function to generate history for given input
gen_history = function(row, sd_rend, crisis = "nee"){
aanwas_forfait = overbrug_me(row$spaargeld[1], row$findproduct[1], row$restbezit[1], row$schuld[1])
data_list = list()
data_list_2 = list()
if (row$risico == 0){sd = 0; sd_rend = 0}
if (row$spaargeld < 0 | is.na(row$spaargeld)){row$spaargeld = 0}
if (row$finproduct < 0 | is.na(row$finproduct)){row$finproduct = 0}
if (row$restbezit < 0 | is.na(row$restbezit)){row$restbezit = 0}
if (row$schuld < 0 | is.na(row$schuld)){row$schuld = 0}
data_list[[1]] = cbind(
row, data.frame(
spaargeld_forfait = 0.0036*row$spaargeld,
finproduct_forfait = 0.0617*row$finproduct,
restbezit_forfait = 0.0617*row$restbezit,
schuld_forfait = 0.0257*row$schuld)) %>%
mutate(aanwas_forfait = spaargeld_forfait + finproduct_forfait + restbezit_forfait - schuld_forfait)
for (i in c(2:20)){
jaar = c(2026:2045)[i]
vorig_jaar = data_list[[i-1]]
dat1 = data.frame(
id = row$id, jaar = jaar, omschrijving = vorig_jaar$omschrijving, risico = vorig_jaar$risico,
spaargeld = update_value(vorig_jaar$spaargeld, vorig_jaar$spaargeld_rendperc),
finproduct = update_value(vorig_jaar$finproduct, vorig_jaar$finproduct_rendperc),
restbezit = update_value(vorig_jaar$restbezit, vorig_jaar$restbezit_rendperc),
schuld = vorig_jaar$schuld,
spaargeld_rendperc = row$spaargeld_rendperc,
finproduct_rendperc = gen_value(row$finproduct_rendperc, sd_rend, n = 1),
restbezit_rendperc = gen_value(row$restbezit_rendperc, sd, n = 1),
schuld_rendperc = gen_value(row$schuld_rendperc, sd, n = 1))
dat2 = data.frame(
spaargeld_forfait = (0.0036*dat1$spaargeld),
finproduct_forfait = (0.0617*dat1$finproduct),
restbezit_forfait = (0.0617*dat1$restbezit),
schuld_forfait = (0.0257*dat1$schuld)) %>%
mutate(aanwas_forfait = spaargeld_forfait + finproduct_forfait + restbezit_forfait - schuld_forfait)
data_list[[i]] = cbind(dat1, dat2)
}
data = do.call(rbind, data_list) %>%
mutate(vermogen = spaargeld + finproduct + restbezit - schuld) %>%
mutate(spaargeld_aanwas = spaargeld * (spaargeld_rendperc/100)) %>%
mutate(finproduct_aanwas = finproduct * (finproduct_rendperc/100)) %>%
mutate(restbezit_aanwas = restbezit * (restbezit_rendperc/100)) %>%
mutate(schuld_aanwas = schuld * (schuld_rendperc/100))
if (crisis == "ja"){
startperc = data$finproduct_rendperc[which(data$jaar == 2035)]/100
startsaldo = data$finproduct_aanwas[which(data$jaar == 2035)]
data$finproduct_aanwas[data$jaar == 2036] = startsaldo - 50*startsaldo*startperc
data$finproduct_aanwas[data$jaar == 2037] = startsaldo - 45*startsaldo*startperc
data$finproduct_aanwas[data$jaar == 2038] = startsaldo - 30*startsaldo*startperc
data$finproduct_aanwas[data$jaar == 2039] = startsaldo - 15*startsaldo*startperc}
# VOEG TOE AANTAL JAREN CRISIS
data = data %>%
mutate(aanwas = spaargeld_aanwas + finproduct_aanwas + restbezit_aanwas - schuld_aanwas) %>%
mutate_at(vars(-id, -omschrijving), funs(round(., 1))) %>%
arrange(id, jaar)
return(data)
}
# function to calculate carry back/forward losses
verreken_verlies = function(data, hvi, cf = 0, cb = 0, drempel = 0){
drempel = -1*drempel
data$grondslag = case_when(
data$aanwas < drempel ~ data$aanwas,
data$aanwas > drempel & data$aanwas <= hvi ~ 0,
data$aanwas > hvi ~ data$aanwas - hvi
)
data$cf = 0
data$cb = 0
for (y in c(1:19)){
year = c(2027:2045)[y]
# voorwaartse verliesverrekening
if (data$grondslag[data$jaar == year] > 0 & cf > 0){
cf_jaar = year - cf; if (cf_jaar < 2026){cf_jaar = 2026}
cf_data = subset(data, jaar >= cf_jaar & jaar <= year - 1)
for (i in c(1:nrow(cf_data))){
cf_row = cf_data[i,]
if (cf_row$grondslag < drempel){
# als verlies kleiner is dan restant grondslag
if (abs(data$grondslag[data$jaar == cf_row$jaar]) <= data$grondslag[which(data$jaar == year)] &
data$grondslag[data$jaar == cf_row$jaar] != 0){
# trek volledig verlies jaar af van grondslag huidig jaar
data$grondslag[data$jaar == year] = data$grondslag[which(data$jaar == year)] - abs(cf_row$grondslag)
# tel verlies op bij cf variabele
data$cf[data$jaar == year] = data$cf[data$jaar == year] + abs(cf_row$grondslag)
# zet resterende grondslag cf jaar gelijk aan nul zodat deze niet opnieuw meegerekend wordt
data$grondslag[data$jaar == cf_row$jaar] = 0
# als verlies groter is dan restant grondslag
} else if (abs(data$grondslag[data$jaar == cf_row$jaar]) >= data$grondslag[which(data$jaar == year)]) {
# bepaal resterende grondslag
rest = data$grondslag[data$jaar == year]
# zet grondslag huidig jaar gelijk aan nul
data$grondslag[data$jaar == year] = 0
# tel rest bedrag op bij grondslag cf jaar
if (data$grondslag[data$jaar == cf_row$jaar] < -rest){data$grondslag[data$jaar == cf_row$jaar] = data$grondslag[data$jaar == cf_row$jaar] + rest} else {data$grondslag[data$jaar == cf_row$jaar] = 0}
# tel restbedrag op bij cf bedrag
data$cf[data$jaar == year] = data$cf[data$jaar == year] + rest
}}}
# achterwaartse verliesverrekening
} else if (data$grondslag[data$jaar == year] < drempel & cb > 0){
cb_jaar = year - cb; if (cb_jaar < 2026){cb_jaar = 2026}
cb_data = subset(data, jaar >= cb_jaar & jaar <= year - 1)
for (i in c(1:nrow(cb_data))){
cb_row = cb_data[i,]
# als grondslag cb groter is dan nul
if (cb_row$grondslag > hvi){
# als winst cb jaar kleiner is dan of gelijk is aan verlies huidig jaar
if (data$grondslag[data$jaar == cb_row$jaar] <= abs(data$grondslag[which(data$jaar == year)]) &
data$grondslag[data$jaar == cb_row$jaar] != 0){
# tel grondslag cb jaar op bij restant verlies huidig jaar
data$grondslag[data$jaar == year] = data$grondslag[data$jaar == year] + data$grondslag[data$jaar == cb_row$jaar]
# tel grondslag cb op bij cb variabele huidig jaar
data$cb[data$jaar == year] = data$cb[data$jaar == year] + data$grondslag[data$jaar == cb_row$jaar]
# stel cb jaar grondslag gelijk aan nul
data$grondslag[data$jaar == cb_row$jaar] = 0
# winst cb jaar groter is dan restant verlies huidig jaar
} else if (data$grondslag[data$jaar == cb_row$jaar] > abs(data$grondslag[which(data$jaar == year)])) {
# bepaal resterend verlies
rest = abs(data$grondslag[data$jaar == year])
# trek resterend verlies af van winst cb jaar
data$grondslag[data$jaar == cb_jaar] = data$grondslag[data$jaar == cb_jaar] - rest
# zet grondslag huidig jaar gelijk aan nul
data$grondslag[data$jaar == year] = 0
# tel verrekening op bij cb variabele
data$cb[data$jaar == year] = data$cb[data$jaar == year] + rest
}}
}}
} # einde year loop
return(data)
}
# functie om belasting te bepalen voor een bepaalde grondslag
bepaal_belasting = function(grondslag, schijf_2 = NA, schijf_3 = NA, tarief_1 = 34, tarief_2 = NA, tarief_3 = NA){
if (grondslag > 0){
# Schijf 3
if(!is.na(schijf_3)){schijf_3 = grondslag - schijf_3} else {schijf_3 = 0}
if(schijf_3 < 0){schijf_3 = 0}
if(!is.na(tarief_3)){belasting_3 = schijf_3 * (tarief_3/100)} else {belasting_3 = NA}
# Schijf 2
if(!is.na(schijf_2)){schijf_2 = grondslag - schijf_3 - schijf_2} else {schijf_2 = 0}
if(schijf_2 < 0){schijf_2 = 0}
if(!is.na(tarief_2)){belasting_2 = schijf_2 * (tarief_2/100)} else {belasting_2 = NA}
# Schijf 1
schijf_1 = grondslag - schijf_3 - schijf_2
if(schijf_1 < 0){schijf_1 = 0}
if(!is.na(tarief_1)){belasting_1 = schijf_1 * (tarief_1/100)} else {belasting_1 = NA}
out = data.frame(schijf = c(1:3), aanwas = c(schijf_1, schijf_2, schijf_3), belasting = c(belasting_1, belasting_2, belasting_3))
} else {
out = data.frame(schijf = c(1:3), aanwas = c(0,0,0), belasting = c(0,0,0))
}
return(out)
}
# functie om getal om te zetten in bedrag in â‚¬
number_to_money = function(number){
options(scipen=999)
number = round(number, digits = 2)
if (number >= 0){number = paste0("â‚¬", number)} else {number = paste0("-â‚¬", abs(number))}
return(number)
}
# functie om getal om te zetten naar percentage
percentify = function(number){
number = paste0(round(number, digits = 2), "%")
return(number)
}
# functie om aanwas te berekenen gegeven vermogen en rendement
bereken_aanwas = function(vermogen, rendement){
if (rendement != 0){
aanwas =  vermogen * (rendement / 100)
} else {
aanwas = 0
}
return(aanwas)
}
# functie om objectieve variant statistieken te genereren
test = select(readxl::read_xlsx("testdata.xlsx"),c("id", "jaar", "aanwas"))
calculate_variant_stats_macro = function(data = test, hvi = 1000, vv_drempel = 1000, cf = 9, cb = 1, s2 = NA, s3 = NA, t1 = 34, t2 = NA, t3 = NA){
# test data
data_new = list()
data_ideal = list()
for (i in 1:length(unique(data$id))){
data_id = unique(data$id)[i]
temp = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = cf, cb = cb, drempel = vv_drempel)
temp_ideal = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = 20, cb = 20, drempel = 0)
temp$belasting = NA
temp_ideal$belasting = NA
for (j in 1:nrow(temp)){
temp$belasting[j] = sum(bepaal_belasting(temp$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
temp_ideal$belasting[j] = sum(bepaal_belasting(temp_ideal$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
}
data_new[[i]] = temp
data_ideal[[i]] = temp_ideal
}
data_new = do.call(rbind, data_new)
data_new_agg = aggregate(.~id, data_new, sum)
data_ideal = do.call(rbind, data_ideal)
# budgettaire raming
# HIER CORRIGEREN
if (data_new_agg > 0){scale = 12000000 / nrow(data_new_agg)} else {scale = NA}
budget_raming = round(sum(data_new$belasting, na.rm = T)*scale / 1000000000, 2)
# grondslag (on)gelijkheid
data_new$grondslag_perc = 0
data_new$grondslag_perc[data_new$aanwas > 0] = (data_new$grondslag[which(data_new$aanwas > 0)] / data_new$aanwas[which(data_new$aanwas > 0)])*100
gini_grondslag = round(ineq(data_new$grondslag_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# belasting (on)gelijkheid
data_new$belasting_perc = 0
data_new$belasting_perc[data_new$aanwas > 0] = (data_new$belasting[which(data_new$aanwas > 0)] / data_new$belasting[which(data_new$aanwas > 0)])*100
gini_belasting = round(ineq(data_new$belasting_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# opbrengst instabiliteit
gini_opbrengst = round(ineq(aggregate(belasting~jaar, data = data_new, FUN = sum)$belasting,type="Gini"),2)
# overbelasting
overbelasting = round(budget_raming - (sum(data_ideal$belasting, na.rm = T)*scale/1000000000),2)
return(list(budget_raming = budget_raming, gini_grondslag = gini_grondslag, gini_belasting = gini_belasting, gini_opbrengst = gini_opbrengst, overbelasting = overbelasting))
}
calculate_variant_stats_micro = function(data = test, hvi = 1000, vv_drempel = 1000, cf = 9, cb = 1, s2 = NA, s3 = NA, t1 = 34, t2 = NA, t3 = NA){
# test data
data_new = list()
data_ideal = list()
if (nrow(unique(data$omschrijving)) < 5){
gini_grondslag = "onvoldoende observaties"
gini_belasting = "onvoldoende observaties"
overbelasting = "onvoldoende observaties"
} else {
for (i in 1:length(unique(data$omschrijving))){
data_id = unique(data$omschrijving)[i]
temp = verreken_verlies(subset(data, omschrijving == data_id), hvi = hvi, cf = cf, cb = cb, drempel = vv_drempel)
temp_ideal = verreken_verlies(subset(data, omschrijving == data_id), hvi = hvi, cf = 20, cb = 20, drempel = 0)
temp$belasting = NA
temp_ideal$belasting = NA
for (j in 1:nrow(temp)){
temp$belasting[j] = sum(bepaal_belasting(temp$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
temp_ideal$belasting[j] = sum(bepaal_belasting(temp_ideal$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
}
data_new[[i]] = temp
data_ideal[[i]] = temp_ideal
}
data_new = do.call(rbind, data_new)
data_ideal = do.call(rbind, data_ideal)
# grondslag (on)gelijkheid
data_new$grondslag_perc = 0
data_new$grondslag_perc[data_new$aanwas > 0] = (data_new$grondslag[which(data_new$aanwas > 0)] / data_new$aanwas[which(data_new$aanwas > 0)])*100
gini_grondslag = round(ineq(data_new$grondslag_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# belasting (on)gelijkheid
data_new$belasting_perc = 0
data_new$belasting_perc[data_new$aanwas > 0] = (data_new$belasting[which(data_new$aanwas > 0)] / data_new$belasting[which(data_new$aanwas > 0)])*100
gini_belasting = round(ineq(data_new$belasting_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# overbelasting
verlies = sum(subset(data_new, aanwas < 0)$aanwas, na.rm = T)
if (is.na(verlies)){verlies = 0}
data_new$vv = data_new$cb + data_new$cf
vv = sum(data_new$vv, na.rm = T)
if (is.na(vv)){vv = 0}
if (verlies > 0) {overbelasting = 100 - ((vv / verlies)*100)} else {overbelasting = 0}
overbelasting = round(overbelasting,2)
}
return(list(gini_grondslag = gini_grondslag, gini_belasting = gini_belasting, overbelasting = overbelasting))
}
calculate_variant_stats_micro(data = test)
calculate_variant_stats_micro = function(data = test, hvi = 1000, vv_drempel = 1000, cf = 9, cb = 1, s2 = NA, s3 = NA, t1 = 34, t2 = NA, t3 = NA){
# test data
data_new = list()
data_ideal = list()
if (length(unique(data$omschrijving)) < 5){
gini_grondslag = "onvoldoende observaties"
gini_belasting = "onvoldoende observaties"
overbelasting = "onvoldoende observaties"
} else {
for (i in 1:length(unique(data$omschrijving))){
data_id = unique(data$omschrijving)[i]
temp = verreken_verlies(subset(data, omschrijving == data_id), hvi = hvi, cf = cf, cb = cb, drempel = vv_drempel)
temp_ideal = verreken_verlies(subset(data, omschrijving == data_id), hvi = hvi, cf = 20, cb = 20, drempel = 0)
temp$belasting = NA
temp_ideal$belasting = NA
for (j in 1:nrow(temp)){
temp$belasting[j] = sum(bepaal_belasting(temp$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
temp_ideal$belasting[j] = sum(bepaal_belasting(temp_ideal$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
}
data_new[[i]] = temp
data_ideal[[i]] = temp_ideal
}
data_new = do.call(rbind, data_new)
data_ideal = do.call(rbind, data_ideal)
# grondslag (on)gelijkheid
data_new$grondslag_perc = 0
data_new$grondslag_perc[data_new$aanwas > 0] = (data_new$grondslag[which(data_new$aanwas > 0)] / data_new$aanwas[which(data_new$aanwas > 0)])*100
gini_grondslag = round(ineq(data_new$grondslag_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# belasting (on)gelijkheid
data_new$belasting_perc = 0
data_new$belasting_perc[data_new$aanwas > 0] = (data_new$belasting[which(data_new$aanwas > 0)] / data_new$belasting[which(data_new$aanwas > 0)])*100
gini_belasting = round(ineq(data_new$belasting_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# overbelasting
verlies = sum(subset(data_new, aanwas < 0)$aanwas, na.rm = T)
if (is.na(verlies)){verlies = 0}
data_new$vv = data_new$cb + data_new$cf
vv = sum(data_new$vv, na.rm = T)
if (is.na(vv)){vv = 0}
if (verlies > 0) {overbelasting = 100 - ((vv / verlies)*100)} else {overbelasting = 0}
overbelasting = round(overbelasting,2)
}
return(list(gini_grondslag = gini_grondslag, gini_belasting = gini_belasting, overbelasting = overbelasting))
}
calculate_variant_stats_micro(data = test)
length(unique(test$omschrijving))
calculate_variant_stats_micro = function(data = test, hvi = 1000, vv_drempel = 1000, cf = 9, cb = 1, s2 = NA, s3 = NA, t1 = 34, t2 = NA, t3 = NA){
# test data
data_new = list()
data_ideal = list()
if (length(unique(data$omschrijving)) < 5){
gini_grondslag = "onvoldoende observaties"
gini_belasting = "onvoldoende observaties"
overbelasting = "onvoldoende observaties"
} else {
for (i in 1:length(unique(data$id))){
data_id = unique(data$id)[i]
temp = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = cf, cb = cb, drempel = vv_drempel)
temp_ideal = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = 20, cb = 20, drempel = 0)
temp$belasting = NA
temp_ideal$belasting = NA
for (j in 1:nrow(temp)){
temp$belasting[j] = sum(bepaal_belasting(temp$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
temp_ideal$belasting[j] = sum(bepaal_belasting(temp_ideal$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
}
data_new[[i]] = temp
data_ideal[[i]] = temp_ideal
}
data_new = do.call(rbind, data_new)
data_ideal = do.call(rbind, data_ideal)
# grondslag (on)gelijkheid
data_new$grondslag_perc = 0
data_new$grondslag_perc[data_new$aanwas > 0] = (data_new$grondslag[which(data_new$aanwas > 0)] / data_new$aanwas[which(data_new$aanwas > 0)])*100
gini_grondslag = round(ineq(data_new$grondslag_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# belasting (on)gelijkheid
data_new$belasting_perc = 0
data_new$belasting_perc[data_new$aanwas > 0] = (data_new$belasting[which(data_new$aanwas > 0)] / data_new$belasting[which(data_new$aanwas > 0)])*100
gini_belasting = round(ineq(data_new$belasting_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# overbelasting
verlies = sum(subset(data_new, aanwas < 0)$aanwas, na.rm = T)
if (is.na(verlies)){verlies = 0}
data_new$vv = data_new$cb + data_new$cf
vv = sum(data_new$vv, na.rm = T)
if (is.na(vv)){vv = 0}
if (verlies > 0) {overbelasting = 100 - ((vv / verlies)*100)} else {overbelasting = 0}
overbelasting = round(overbelasting,2)
}
return(list(gini_grondslag = gini_grondslag, gini_belasting = gini_belasting, overbelasting = overbelasting))
}
calculate_variant_stats_micro(data = test)
calculate_variant_stats_micro = function(data = test, hvi = 1000, vv_drempel = 1000, cf = 9, cb = 1, s2 = NA, s3 = NA, t1 = 34, t2 = NA, t3 = NA){
# test data
data_new = list()
data_ideal = list()
if (length(unique(data$id)) < 5){
gini_grondslag = "onvoldoende observaties"
gini_belasting = "onvoldoende observaties"
overbelasting = "onvoldoende observaties"
} else {
for (i in 1:length(unique(data$id))){
data_id = unique(data$id)[i]
temp = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = cf, cb = cb, drempel = vv_drempel)
temp_ideal = verreken_verlies(subset(data, id == data_id), hvi = hvi, cf = 20, cb = 20, drempel = 0)
temp$belasting = NA
temp_ideal$belasting = NA
for (j in 1:nrow(temp)){
temp$belasting[j] = sum(bepaal_belasting(temp$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
temp_ideal$belasting[j] = sum(bepaal_belasting(temp_ideal$grondslag[j], schijf_2 = s2, schijf_3 = s3, tarief_1 = t1, tarief_2 = t2, tarief_3 = t3)$belasting, na.rm = T)
}
data_new[[i]] = temp
data_ideal[[i]] = temp_ideal
}
data_new = do.call(rbind, data_new)
data_ideal = do.call(rbind, data_ideal)
# grondslag (on)gelijkheid
data_new$grondslag_perc = 0
data_new$grondslag_perc[data_new$aanwas > 0] = (data_new$grondslag[which(data_new$aanwas > 0)] / data_new$aanwas[which(data_new$aanwas > 0)])*100
gini_grondslag = round(ineq(data_new$grondslag_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# belasting (on)gelijkheid
data_new$belasting_perc = 0
data_new$belasting_perc[data_new$aanwas > 0] = (data_new$belasting[which(data_new$aanwas > 0)] / data_new$belasting[which(data_new$aanwas > 0)])*100
gini_belasting = round(ineq(data_new$belasting_perc[which(data_new$jaar == 2045)],type="Gini"),2)
# overbelasting
verlies = sum(subset(data_new, aanwas < 0)$aanwas, na.rm = T)
if (is.na(verlies)){verlies = 0}
data_new$vv = data_new$cb + data_new$cf
vv = sum(data_new$vv, na.rm = T)
if (is.na(vv)){vv = 0}
if (verlies > 0) {overbelasting = 100 - ((vv / verlies)*100)} else {overbelasting = 0}
overbelasting = round(overbelasting,2)
}
return(list(gini_grondslag = gini_grondslag, gini_belasting = gini_belasting, overbelasting = overbelasting))
}
calculate_variant_stats_micro(data = test)
# base values
id = 1; jaar = 2026; omschrijving = "Jan Modaal"; risico = 2;
spaargeld = gen_value(42300, sd); finproduct = gen_value(7000, sd);
restbezit = 0; schuld = gen_value(12800, sd);
spaargeld_rendperc = gen_value(0.36, sd);
finproduct_rendperc = gen_value(6.17, sd_rend);
restbezit_rendperc = gen_value(6.17, sd);
schuld_rendperc = gen_value(2.57, sd)
# case data
case_data = gen_history(
data.frame(id = id, jaar = jaar, omschrijving = omschrijving, risico = risico,
spaargeld = spaargeld, finproduct = finproduct, restbezit = restbezit,
schuld = schuld, spaargeld_rendperc = spaargeld_rendperc,
finproduct_rendperc = finproduct_rendperc, restbezit_rendperc = restbezit_rendperc,
schuld_rendperc = schuld_rendperc), sd_rend = sd_rend)
calculate_variant_stats_micro(data = case_data)
case_data = rep(gen_history(
data.frame(id = id, jaar = jaar, omschrijving = omschrijving, risico = risico,
spaargeld = spaargeld, finproduct = finproduct, restbezit = restbezit,
schuld = schuld, spaargeld_rendperc = spaargeld_rendperc,
finproduct_rendperc = finproduct_rendperc, restbezit_rendperc = restbezit_rendperc,
schuld_rendperc = schuld_rendperc), sd_rend = sd_rend),10)
calculate_variant_stats_micro(data = case_data)
id = 1; jaar = 2026; omschrijving = "Jan Modaal"; risico = 2;
spaargeld = gen_value(42300, sd); finproduct = gen_value(7000, sd);
restbezit = 0; schuld = gen_value(12800, sd);
spaargeld_rendperc = gen_value(0.36, sd);
finproduct_rendperc = gen_value(6.17, sd_rend);
restbezit_rendperc = gen_value(6.17, sd);
schuld_rendperc = gen_value(2.57, sd)
# case data
case_data = rep(gen_history(
data.frame(id = c(1:10), jaar = jaar, omschrijving = omschrijving, risico = risico,
spaargeld = spaargeld, finproduct = finproduct, restbezit = restbezit,
schuld = schuld, spaargeld_rendperc = spaargeld_rendperc,
finproduct_rendperc = finproduct_rendperc, restbezit_rendperc = restbezit_rendperc,
schuld_rendperc = schuld_rendperc), sd_rend = sd_rend),10)
runApp()
